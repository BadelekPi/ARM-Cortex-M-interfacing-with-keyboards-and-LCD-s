#include "TM4C123.h"                    // Device header

#define LCD GPIOB
#define RS 1 // 0x01 : 0B 0000 0001 : PB0
#define RW 2 // 0x02 : 0B 0000 0010 : PB1
#define EN 4 // 0x04 : 0B 0000 0100 : PB2

#define K_ROW GPIOE
#define K_COL GPIOC

//prototypes
void delayUs(int n);
void delayMs(int n);
void LCD_Write4bits(unsigned char data, unsigned char control);
void LCD4bits_Cmd(unsigned char command);
void LCD4bits_Init(void);
void LCD4BITS_Data(unsigned char data);
void KEYPAD_init(void);
unsigned char getKey(void);

void KEYPAD_init(void)
{
	SYSCTL->RCGCGPIO |= 0x04; //Enable PortC clock
	SYSCTL->RCGCGPIO |= 0x10; //Enable PortE clock
	
	K_ROW->DIR |= 0x0F;
	K_ROW->DEN |= 0x0F;
	K_ROW->ODR |= 0x0F;
	
	K_COL->DIR &=~0xF0; //Set PC4-7 as input
	K_COL->DEN |= 0xF0;
	K_COL->PUR |= 0XF0;
}

unsigned char getKey(void)
{
	const unsigned char keymap[4][4]=
	{
		{'1','2','3','A'},
		{'4','5','6','B'},
		{'7','8','9','C'},
		{'*','0','#','D'}
	};
	uint8_t k_row, k_col;
	
	K_ROW->DATA = 0;
	k_col = K_COL-> DATA & 0xF0;
	
	if(k_col == 0xF0)
		return 0; //no key pressed
	
	for(;;)
	{
		k_row=0;
		K_ROW->DATA = 0x0E;
		delayUs(10);
		k_col = K_COL->DATA & 0xF0;
		if(k_col != 0xF0)
			break;
		
		k_row = 1;
		K_ROW->DATA = 0x0D; //Enable row 1
		delayUs(10);
		k_col = K_COL->DATA & 0xF0;
		if(k_col != 0xF0)
			break;
		
		k_row = 2;
		K_ROW->DATA = 0x0B; //Enable row 2
		delayUs(10);
		k_col = K_COL->DATA & 0xF0;
		if(k_col != 0xF0)
			break;
		
		k_row = 3;
		K_ROW->DATA = 0x07; //Enable row 3
		delayUs(10);
		k_col = K_COL->DATA & 0xF0;
		if(k_col != 0xF0)
			break;
		
		return 0;
	}
	
	if(k_col == 0xE0)
		return keymap[k_row][0];
	if(k_col == 0xD0)
		return keymap[k_row][1];
	if(k_col == 0xB0)
		return keymap[k_row][2];
	if(k_col == 0x70)
		return keymap[k_row][3];
	
	return 0;
}


int main()
{
	unsigned char key;
	int key_count;
	KEYPAD_init();
	LCD4bits_Init();
	LCD4bits_Cmd(1);
	LCD4bits_Cmd(0x80);
	delayMs(500);
	while(1)
	{
		key = getKey();
		delayMs(500);
		if(key != 0){
		  key_count++;
			if(key_count>=16)
			{
				LCD4bits_Data(key);
				delayMs(500);
				LCD4bits_Cmd(0xC0);
				key_count = 0;
			}
			if(key == '*'){
				LCD4bits_Cmd(0x01); //clear screen
				LCD4bits_Cmd(0x08);
				key_count = 0;
			}
		  LCD4BITS_Data(key);
			delayMs(100);
		}	
	}	
}

void LCD4bits_Init(void)
{
	SYSCTL->RCGCGPIO |= (1U<<1); // PB
	LCD->DIR = 0xFF; // 0B 1111 1111	
	LCD->DEN = 0xFF; // 0B 1111 1111
	LCD4bits_Cmd(0x28); // Set mode as 4-bits, 2 lines, 5x7 fonts
	LCD4bits_Cmd(0x06); // Move cursor right
	LCD4bits_Cmd(0x01); // Clear screen
	LCD4bits_Cmd(0x0F); // Turn display on
	//....
	//...
	//..
	//.
	
}

void LCD_Write4bits(unsigned char data, unsigned char control)
{
	data &= 0xF0; // clear lower 4 bits to keep just upper bits i.e. data bits
	control &= 0x0F; // clear upper 4 bits to keep just lower bits i.e. control bits
	LCD->DATA = data | control;
	LCD->DATA = data | control | EN;
	delayUs(0);
	LCD -> DATA = data;
}

void LCD4bits_Cmd(unsigned char command)
{
	LCD_Write4bits(command & 0xF0,0); //upper 4 bits
	LCD_Write4bits(command<<4,0);  //lower 4 bits
	
	if(command<4)
		delayMs(2);
	else
		delayUs(40);
}

void LCD4BITS_Data(unsigned char data)
{
	LCD_Write4bits(data & 0xF0, RS);
	LCD_Write4bits(data << 4, RS);
	delayUs(40);
}

void delayMs(int n)
{
	int x,y;
	for(x=0; x<n; x++){
	 for(y=0; y<3180; y++)
		{}
	}
}

void delayUs(int n)
{
	int x,y;
	for(x=0; x<n; x++)
	{
		for(y=0; y<3; y++)
		{}
	}
}
